{"version":3,"sources":["components/control-pannel/control-pannel.module.css","components/info-bar/info-bar.module.css","components/game/game.module.css","components/square/square.module.css","components/board/board.module.css","components/info-block/info-block.module.css","components/square/square.js","components/board/board.js","libraries/library.js","components/control-pannel/control-pannel.js","components/info-bar/info-bar.js","components/info-block/info-block.js","scripts/calculate-next-move.js","scripts/calculate-winner.js","scripts/storage-controller.js","components/game/game.js","index.js"],"names":["module","exports","Square","value","onClick","className","classes","Board","squares","squareComponents","map","square","index","GAME_MODES","PLAYER_SYMBOLS","GAME_STATUS","buttonsInfo","name","label","GameModePannel","activeGameMode","onChangeMode","buttons","Button","ActiveButton","Panel","GameResetButton","onReset","ResetButton","ControlPannel","props","onResetGame","GameInfo","moves","onJumpTo","movesItem","step","move","Bar","List","InfoBlock","info","Block","winCombinations","combinationsCount","length","getWinPosition","moveValuesArray","secondValue","i","some","el","nextTurns","filter","checkTurn","botValue","playerValue","botWinPosition","playerWinPosition","indexOf","getRandomPosition","calculateWinner","a","b","c","storageName","gameData","localStorage","getItem","Game","isNextTurnBlocked","state","JSON","parse","history","initHistory","stepNumber","isFirstPlayerTurn","boardClickHandler","handleClick","bind","changeModeHandler","resetGameHanddler","Array","fill","squareIndex","this","slice","setState","concat","setTimeout","checkArr","turn","data","stringify","setItem","current","winner","status","robotTurn","Main","jumpTo","PlayField","Component","ReactDOM","render","document","getElementById"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,MAAQ,8BAA8B,YAAc,oCAAoC,OAAS,+BAA+B,aAAe,uC,gBCAjKD,EAAOC,QAAU,CAAC,IAAM,sBAAsB,KAAO,uBAAuB,OAAS,2B,gBCArFD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,UAAY,0B,oBCAlFD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,MAAQ,4B,sJCaXC,MAXf,YAAmC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACtB,OACE,qBACEC,UAAWC,IAAQJ,OACnBE,QAASA,EAFX,SAIGD,K,iBCkBQI,MAtBf,YAAoC,IAApBC,EAAmB,EAAnBA,QAASJ,EAAU,EAAVA,QACjBK,EAAmBD,EAAQE,KAAI,SAACC,EAAQC,GAK5C,OACE,cAAC,EAAD,CACET,MAAOK,EAAQI,GACfR,QAPJ,WACEA,EAAQQ,KAODA,MAKX,OACE,qBAAKP,UAAWC,IAAQC,MAAxB,SACGE,K,gBCtBDI,EACM,QADNA,EAEG,QAGHC,EACG,IADHA,EAEI,IAGJC,EACA,MADAA,EAEC,YCRDC,EAAc,CAClB,CAACC,KAAMJ,EAAqBK,MAAO,SACnC,CAACD,KAAMJ,EAAkBK,MAAO,UAG5BC,EAAiB,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,aACjCC,EAAUN,EAAYN,KAAI,YAAoB,IAAlBO,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAKtC,OACE,wBACEb,UAAWC,IAAQiB,QAAWN,IAASG,EAAV,WAAgCd,IAAQkB,cAAkB,IAEvFpB,QARJ,WACEiB,EAAaJ,IAIb,SAIEC,GAFKD,MAMX,OACE,qBAAKZ,UAAWC,IAAQmB,MAAxB,SACGH,KAKDI,EAAkB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACxB,OACE,wBACEtB,UAAWC,IAAQsB,YACnBxB,QAASuB,EAFX,uBAyBWE,MAhBf,SAAuBC,GACrB,IAAOV,EAA6CU,EAA7CV,eAAgBC,EAA6BS,EAA7BT,aAAcU,EAAeD,EAAfC,YAErC,OACE,sBAAK1B,UAAWC,IAAQmB,MAAxB,UACE,cAAC,EAAD,CACEE,QAASI,IAEX,cAAC,EAAD,CACEX,eAAgBA,EAChBC,aAAcA,Q,gBCtBPW,EA3BE,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAClBC,EAAYF,EAAMvB,KAAI,SAAC0B,EAAMC,GAKjC,OACE,6BACE,yBACEhC,UAAWC,IAAQiB,OACnBnB,QARN,WACE8B,EAASG,IAKP,UAIEA,EAJF,YADOA,MAWb,OACE,qBAAKhC,UAAWC,IAAQgC,IAAxB,SACE,oBAAIjC,UAAWC,IAAQiC,KAAvB,SACGJ,O,iBCbMK,EARG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAClB,OACE,qBAAKpC,UAAWC,IAAQoC,MAAxB,SACGD,KCNDE,EAAkB,CACtB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHC,EAAoBD,EAAgBE,OAE1C,SAASC,EAAeC,EAAiBC,GACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAmBK,IACrC,IAAKN,EAAgBM,GAAGC,MAAK,SAACC,GAAD,OAAQJ,EAAgBI,KAAQH,KAAc,CACzE,IAAMI,EAAaT,EAAgBM,GAAGI,QAAO,SAAAF,GAE3C,OAA+B,OAAxBJ,EAAgBI,MAEzB,GAAyB,IAArBC,EAAUP,OAEZ,OAAOO,EAAU,GAKxB,OAAO,KAkBOE,MAPf,SAAmBP,EAAiBQ,EAAUC,GAC5C,IAAMC,EAAiBX,EAAeC,EAAiBS,GACjDE,EAAoBZ,EAAeC,EAAiBQ,GAE1D,OAAOE,GAAkBC,GAZ3B,SAA2BX,GACzB,OAAKA,EArBuB,GAyBrBA,EAAgBY,QAAQ,MAzBH,EAgCkBC,CAAkBb,I,QC1C1DJ,EAAkB,CACtB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAcIkB,MAXf,SAAyBrD,GACvB,IAAK,IAAIyC,EAAI,EAAGA,EAAIN,EAAgBE,OAAQI,IAAK,CAC/C,kBAAkBN,EAAgBM,GAAlC,GAAOa,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIxD,EAAQsD,IAAMtD,EAAQsD,KAAOtD,EAAQuD,IAAMvD,EAAQsD,KAAOtD,EAAQwD,GACpE,OAAOxD,EAAQsD,GAInB,OAAO,MCnBHG,EAAc,YACdC,EAAWC,aAAaC,QAAQH,G,gBCyHvBI,E,kDA9Gb,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IACDwC,mBAAoB,EACzB,EAAKC,MDXAC,KAAKC,MAAMP,ICWc,CAC5BQ,QAAS,EAAKC,cACdC,WAAY,EACZC,mBAAmB,EACnBzD,eAAgBP,GAElB,EAAKiE,kBAAoB,EAAKC,YAAYC,KAAjB,gBACzB,EAAKC,kBAAoB,EAAK5D,aAAa2D,KAAlB,gBACzB,EAAKE,kBAAoB,EAAKnD,YAAYiD,KAAjB,gBAXR,E,+CAcnB,WAEE,MAAO,CAAC,CAACxE,QAAS2E,MAAM,GAAGC,KAAK,U,yBAGnC,SAAYC,GACT,IAAIC,KAAKhB,kBAAT,CAGA,IAAMI,EAAUY,KAAKf,MAAMG,QAAQa,MAAM,EAAGD,KAAKf,MAAMK,WAAa,GAE9DpE,EADUkE,EAAQA,EAAQ7B,OAAS,GACjBrC,QAAQ+E,QAC5B1B,EAAgBrD,IAAYA,EAAQ6E,KAGxC7E,EAAQ6E,GAAeC,KAAKf,MAAMM,kBAAoB/D,EAAuBA,EAC7EwE,KAAKE,SAAS,CACZd,QAASA,EAAQe,OAAO,CAAC,CACvBjF,aAEFoE,WAAYF,EAAQ7B,OACpBgC,mBAAoBS,KAAKf,MAAMM,wB,uBAInC,WAAa,IAAD,OACHH,EAAWY,KAAKf,MAAhBG,QACPgB,YAAW,WACT,EAAKpB,mBAAoB,EACzB,IAAMqB,EAAWjB,EAAQA,EAAQ7B,OAAS,GAAGrC,QACvCoF,EAAOtC,EAAUqC,EAAU7E,EAAuBA,GACxD,EAAKiE,YAAYa,KAChB,O,oBAGL,SAAOxD,GACLkD,KAAKE,SAAS,CACZZ,WAAYxC,EACZyC,kBAAoBzC,EAAO,IAAO,M,0BAItC,SAAahB,GACXkE,KAAKvD,cACLuD,KAAKE,SAAS,CACZpE,qB,yBAIJ,WACEkE,KAAKE,SAAS,CACZd,QAASY,KAAKX,cACdC,WAAY,M,oBAIhB,WD3EqB,IAACiB,IC4ELrB,KAAKsB,UAAUR,KAAKf,OD3ErCJ,aAAa4B,QAAQ9B,EAAa4B,GC4EhC,MAAiEP,KAAKf,MAA/DnD,EAAP,EAAOA,eAAgByD,EAAvB,EAAuBA,kBAAmBH,EAA1C,EAA0CA,QACpCsB,EAAUtB,EADhB,EAAmDE,YAE7CqB,EAASpC,EAAgBmC,EAAQxF,SACjC0F,EAAUD,EAAD,UACRlF,EADQ,YACWkF,GADX,UAERlF,EAFQ,aAEc8D,EAAoB/D,EAAuBA,GAMxE,OALKmF,GAAU7E,IAAmBP,GAAqBgE,IACrDS,KAAKhB,mBAAoB,EACzBgB,KAAKa,aAIL,sBAAK9F,UAAWC,IAAQ+D,KAAxB,UACE,cAAC,EAAD,CACEjD,eAAgBA,EAChBC,aAAciE,KAAKL,kBACnBlD,YAAauD,KAAKJ,oBAEpB,sBAAK7E,UAAWC,IAAQ8F,KAAxB,UACE,cAAC,EAAD,CACEnE,MAAOyC,EACPxC,SAAUoD,KAAKe,OAAOrB,KAAKM,QAE7B,sBAAKjF,UAAWC,IAAQgG,UAAxB,UACE,cAAC,EAAD,CACE7D,KAAMyD,IAER,cAAC,EAAD,CACE1F,QAASwF,EAAQxF,QACjBJ,QAASkF,KAAKR,iC,GAtGTyB,a,MCNnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ea58d6b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Panel\":\"control-pannel_Panel__16mjT\",\"ResetButton\":\"control-pannel_ResetButton__2lnV1\",\"Button\":\"control-pannel_Button__1X6w1\",\"ActiveButton\":\"control-pannel_ActiveButton__qC4LL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bar\":\"info-bar_Bar__BxMy1\",\"List\":\"info-bar_List__nCC7d\",\"Button\":\"info-bar_Button__2HEhs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"game_Game__14uOY\",\"Main\":\"game_Main__rWvlI\",\"PlayField\":\"game_PlayField___tR_7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"square_Square__2ZfUl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"board_Board__EaV3U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Block\":\"info-block_Block__1-tDp\"};","import React from 'react';\r\nimport classes from './square.module.css';\r\n\r\nfunction Square({value, onClick}) {\r\n  return (\r\n    <div\r\n      className={classes.Square}\r\n      onClick={onClick}\r\n    >\r\n      {value}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from '../square/square';\r\nimport classes from  './board.module.css';\r\n\r\n\r\nfunction Board({squares, onClick}) {\r\n  const squareComponents = squares.map((square, index) => {\r\n    function clickHandler() {\r\n      onClick(index)\r\n    }\r\n\r\n    return (\r\n      <Square\r\n        value={squares[index]}\r\n        onClick={clickHandler}\r\n        key={index}\r\n      />\r\n    )\r\n  });   \r\n\r\n  return (\r\n    <div className={classes.Board}>\r\n      {squareComponents}\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default Board;\r\n","const GAME_MODES = {\r\n  vsPlayer: 'human',\r\n  vsBot: 'robot'\r\n}\r\n\r\nconst PLAYER_SYMBOLS = {\r\n  FIRST: 'X',\r\n  SECOND: 'O'\r\n}\r\n\r\nconst GAME_STATUS = {\r\n\tWIN: 'Win',\r\n\tNEXT: 'Next turn',\r\n}\r\n\r\nexport { GAME_MODES, PLAYER_SYMBOLS, GAME_STATUS }\r\n","import React from 'react';\r\nimport classes from  './control-pannel.module.css';\r\nimport {GAME_MODES} from '../../libraries/library';\r\n\r\nconst buttonsInfo = [\r\n  {name: GAME_MODES.vsPlayer, label: 'human'},\r\n  {name: GAME_MODES.vsBot, label: 'robot'},\r\n];\r\n\r\nconst GameModePannel = ({activeGameMode, onChangeMode}) => {\r\n  const buttons = buttonsInfo.map(({name, label}) => {\r\n    function clickHandler() {\r\n      onChangeMode(name);\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className={classes.Button + ((name === activeGameMode) ? ` ${classes.ActiveButton}` :  '')}\r\n        key={name}\r\n        onClick={clickHandler}\r\n      >{label}</button>\r\n    )     \r\n  })\r\n\r\n  return (\r\n    <div className={classes.Panel}>\r\n      {buttons}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst GameResetButton = ({onReset}) => {\r\n  return (\r\n    <button \r\n      className={classes.ResetButton}\r\n      onClick={onReset}\r\n    > \r\n      New game\r\n    </button>\r\n  )\r\n}\r\n\r\nfunction ControlPannel(props) {\r\n  const {activeGameMode, onChangeMode, onResetGame} = props;\r\n\r\n  return (\r\n    <div className={classes.Panel}>\r\n      <GameResetButton\r\n        onReset={onResetGame}\r\n      />\r\n      <GameModePannel\r\n        activeGameMode={activeGameMode}\r\n        onChangeMode={onChangeMode}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ControlPannel;\r\n","import React from 'react';\r\nimport classes from './info-bar.module.css';\r\n\r\nconst GameInfo = ({moves, onJumpTo}) => {\r\n  const movesItem = moves.map((step, move) => {\r\n    function clickHandler() {\r\n      onJumpTo(move)\r\n    }\r\n\r\n    return (\r\n      <li key={move}>\r\n        <button \r\n          className={classes.Button}\r\n          onClick={clickHandler}\r\n        >\r\n         {move} step\r\n        </button>\r\n      </li>            \r\n    )\r\n  })\r\n  \r\n  return (\r\n    <div className={classes.Bar}>\r\n      <ul className={classes.List}>\r\n        {movesItem}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameInfo;\r\n","import React from 'react';\r\nimport classes from './info-block.module.css';\r\n\r\nconst InfoBlock = ({info}) => {\r\n  return (\r\n    <div className={classes.Block}>\r\n      {info}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoBlock;\r\n","const winCombinations = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\nconst bestFreePositionIndex = 4;\r\nconst combinationsCount = winCombinations.length;\r\n\r\nfunction getWinPosition(moveValuesArray, secondValue) {\r\n  for (let i = 0; i < combinationsCount; i++) {\r\n    if (!winCombinations[i].some((el) => moveValuesArray[el] === secondValue)) {\r\n      const nextTurns =  winCombinations[i].filter(el => {\r\n  \r\n        return moveValuesArray[el] === null;\r\n      })\r\n      if (nextTurns.length === 1) {\r\n        \r\n        return nextTurns[0];\r\n      }\r\n   }\r\n  }\r\n\r\n return null\r\n}\r\n\r\nfunction getRandomPosition(moveValuesArray) {\r\n  if (!moveValuesArray[bestFreePositionIndex]) {\r\n    return bestFreePositionIndex;\r\n  }\r\n\r\n  return moveValuesArray.indexOf(null);\r\n}\r\n\r\nfunction checkTurn(moveValuesArray, botValue, playerValue) {\r\n  const botWinPosition = getWinPosition(moveValuesArray, playerValue);\r\n  const playerWinPosition = getWinPosition(moveValuesArray, botValue);\r\n\r\n  return botWinPosition || playerWinPosition || getRandomPosition(moveValuesArray);\r\n}\r\n\r\nexport default checkTurn;\r\n","  const winCombinations = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\nfunction calculateWinner(squares) {\r\n  for (let i = 0; i < winCombinations.length; i++) {\r\n    const [a, b, c] = winCombinations[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport default calculateWinner;\r\n","const storageName = \"ticTacToe\"\r\nconst gameData = localStorage.getItem(storageName);\r\n\r\nconst getGameData = () => {\r\n  return JSON.parse(gameData);\r\n}\r\n\r\nconst updateGameData = (data) => {\r\n  localStorage.setItem(storageName, data)\r\n}\r\n\r\nexport {getGameData, updateGameData};\r\n","import React, {Component} from 'react';\r\nimport Board from '../board/board';\r\nimport ControlPannel from '../control-pannel/control-pannel';\r\nimport GameInfo from '../info-bar/info-bar';\r\nimport InfoBlock from '../info-block/info-block';\r\nimport checkTurn from '../../scripts/calculate-next-move';\r\nimport calculateWinner from '../../scripts/calculate-winner';\r\nimport {getGameData, updateGameData} from '../../scripts/storage-controller';\r\nimport {GAME_MODES, PLAYER_SYMBOLS, GAME_STATUS} from '../../libraries/library';\r\nimport classes from './game.module.css';\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.isNextTurnBlocked = false;\r\n    this.state = getGameData() || {\r\n      history: this.initHistory(),\r\n      stepNumber: 0,\r\n      isFirstPlayerTurn: true,\r\n      activeGameMode: GAME_MODES.vsPlayer,\r\n    }\r\n    this.boardClickHandler = this.handleClick.bind(this);\r\n    this.changeModeHandler = this.onChangeMode.bind(this);\r\n    this.resetGameHanddler = this.onResetGame.bind(this);\r\n  }\r\n\r\n  initHistory() {\r\n\r\n    return [{squares: Array(9).fill(null)}]\r\n  }\r\n\r\n\thandleClick(squareIndex) {\r\n    if (this.isNextTurnBlocked) {\r\n      return\r\n    }\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[squareIndex]) {\r\n     return;\r\n    }\r\n    squares[squareIndex] = this.state.isFirstPlayerTurn ? PLAYER_SYMBOLS.FIRST : PLAYER_SYMBOLS.SECOND;\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares\r\n      }]),\r\n      stepNumber: history.length,\r\n      isFirstPlayerTurn: !this.state.isFirstPlayerTurn,\r\n    });\r\n  }\r\n\r\n  robotTurn() {\r\n    const {history} = this.state;\r\n    setTimeout(()=>{\r\n      this.isNextTurnBlocked = false;\r\n      const checkArr = history[history.length - 1].squares;\r\n      const turn = checkTurn(checkArr, PLAYER_SYMBOLS.SECOND, PLAYER_SYMBOLS.FIRST);\r\n      this.handleClick(turn);\r\n    }, 500) \r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      isFirstPlayerTurn: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  onChangeMode(activeGameMode) {\r\n    this.onResetGame();\r\n    this.setState({\r\n      activeGameMode\r\n    })\r\n  }\r\n\r\n  onResetGame() {\r\n    this.setState({\r\n      history: this.initHistory(),\r\n      stepNumber: 0\r\n    })\r\n  }\r\n\r\n  render() {\r\n    updateGameData(JSON.stringify(this.state));\r\n    const {activeGameMode, isFirstPlayerTurn, history, stepNumber} = this.state;\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const status = (winner)\r\n      ? `${GAME_STATUS.WIN} ${winner}`\r\n      : `${GAME_STATUS.NEXT}: ${(isFirstPlayerTurn ? PLAYER_SYMBOLS.FIRST : PLAYER_SYMBOLS.SECOND)}`;\r\n    if (!winner && activeGameMode === GAME_MODES.vsBot && !isFirstPlayerTurn) {\r\n      this.isNextTurnBlocked = true;\r\n      this.robotTurn();\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Game}>\r\n        <ControlPannel\r\n          activeGameMode={activeGameMode}\r\n          onChangeMode={this.changeModeHandler}\r\n          onResetGame={this.resetGameHanddler}\r\n        />\r\n        <div className={classes.Main}>\r\n          <GameInfo\r\n            moves={history}\r\n            onJumpTo={this.jumpTo.bind(this)}\r\n          />\r\n          <div className={classes.PlayField}>\r\n            <InfoBlock\r\n              info={status}\r\n            />\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={this.boardClickHandler} \r\n            />\r\n          </div> \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './components/game/game';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Game/>,\r\n  document.getElementById('root')\r\n);\r\n  "],"sourceRoot":""}